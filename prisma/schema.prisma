// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:1234@localhost:3306/agrimarket2"
}

model buyers {
  buyer_id     Int               @unique @default(autoincrement())
  name         String
  email        String            @unique
  address      String
  contactNo    String            @unique
  password     String
  otp          String?
  otpExpiresAt DateTime?
  cart         cart[]
  wallet       wallet[]
  addresses    buyerAddress[]
  reviews      ReviewAndRating[]
}

model buyerAddress {
  user       buyers @relation(fields: [buyerId], references: [buyer_id])
  buyerId    Int
  line1      String
  line2      String
  city       String
  postalCode Int

  @@id([buyerId, line1, line2, city])
}

model sellers {
  seller_id              Int                     @unique @default(autoincrement())
  store_name             String?
  email                  String                  @unique
  line1                  String?
  line2                  String?
  district               String?
  contactNo              String?                 @unique
  password               String?
  OTP                    String? // Changed OTP to otp
  otpExpiresAt           DateTime?
  emailVerified          Boolean
  profilePic             String?
  // sellerCity             city                    @relation(fields: [line1], references: [city_name])
  products               Product[]
  orders                 orders[]
  notifications          notifications[]
  calendar               calendarEvents[]
  sellerBankVerification SellerBankVerification?
}

model SellerBankVerification {
  id            Int     @id @unique @default(autoincrement())
  seller        sellers @relation(fields: [seller_id], references: [seller_id])
  seller_id     Int     @unique
  idNumber      String?
  idFrontPhoto  String? // Store URL or path to front side of ID photo
  idBackPhoto   String? // Store URL or path to back side of ID photo
  bankBookPhoto String? // Store URL or path to bank book front page photo
  bankName      String? // Name of the bank
  accountHolder String? // Name of the account holder
  bankCode      String? // IFSC code of the bank
  accountNumber String? // Bank accountÂ number
}

model verification_codes {
  id    Int    @id @default(autoincrement())
  email String
  code  String
}

model Product {
  product_id    Int               @id @default(autoincrement())
  name          String
  price         Float
  description   String
  image1        String
  image2        String
  image3        String
  image4        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  categoryId    Int
  category      Category          @relation(fields: [categoryId], references: [category_id], map: "product_category")
  sellerId      Int
  seller        sellers           @relation(fields: [sellerId], references: [seller_id], map: "product_seller")
  quantity      Int // Added field
  quantityLimit Int // Added field
  notifications notifications[]
  cart          cartProduct[]
  reviews       ReviewAndRating[]
}

// Define the Category model
model Category {
  category_id Int       @id @default(autoincrement())
  name        String?
  products    Product[]
}

model cart {
  buyerId     Int           @id
  buyer       buyers        @relation(fields: [buyerId], references: [buyer_id])
  cartProduct cartProduct[]
}

model cartProduct {
  buyerId   Int
  buyer     cart    @relation(fields: [buyerId], references: [buyerId])
  productId Int
  product   Product @relation(fields: [productId], references: [product_id])
  qty       Int

  @@id([buyerId, productId])
}

model wallet {
  wallet_id    Int    @id @unique @default(autoincrement())
  buyer        buyers @relation(fields: [buyerId], references: [buyer_id])
  buyerId      Int
  walletBal    Float
  ReachargeAmt Float
}

model admin {
  admin_id Int    @id @default(autoincrement())
  name     String
  email    String
  password String
}

model orders {
  order_id Int     @id @default(autoincrement())
  sellerId Int
  buyerId  Int
  seller   sellers @relation(fields: [sellerId], references: [seller_id], map: "puchased_order")
}

model Payment {
  payment_id Int      @id @default(autoincrement())
  buyerId    Int
  date       DateTime
  Amount     Float
}

model calendarEvents {
  event_id    Int      @id @default(autoincrement())
  categoryId  Int
  productId   Int
  productName String
  note        String
  start       DateTime
  sellerId    Int
  seller      sellers  @relation(fields: [sellerId], references: [seller_id], map: "calendar")
}

model notifications {
  N_id      Int      @id @default(autoincrement())
  message   String
  timestamp DateTime
  Status    String
  sellerId  Int
  productid Int
  product   Product  @relation(fields: [productid], references: [product_id], map: "notification_about")
  seller    sellers  @relation(fields: [sellerId], references: [seller_id], map: "notification_from")
}

model ReviewAndRating {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  productId Int
  product   Product  @relation(fields: [productId], references: [product_id], onDelete: Cascade)
  buyerId   Int
  buyer     buyers   @relation(fields: [buyerId], references: [buyer_id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model CarouselItem {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  altText   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model city {
  city_name String @id
  lat       Float
  lng       Float
  // sellerCity sellers[]
}
