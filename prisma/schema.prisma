generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Pawan34741@@localhost:3306/AgriMarket"
}

model buyers {
  buyer_id    Int               @id @default(autoincrement())
  name        String
  email       String            @unique
  address     String
  contactNo   String            @unique
  password    String
  otp         String?
  otpExpireAt DateTime?
  cart        cart[]
  wallet      wallet[]
  addresses   buyerAddress[]
  reviews     ReviewAndRating[]
  orders      Orders[]
}

model buyerAddress {
  user       buyers @relation(fields: [buyerId], references: [buyer_id], map: "buyerAddress_buyer")
  buyerId    Int
  line1      String
  line2      String
  city       String
  postalCode Int

  @@id([buyerId, line1, line2, city])
}

model sellers {
  seller_id     Int              @id @default(autoincrement())
  store_name    String?
  email         String           @unique
  line1         String?
  line2         String?
  city          String?
  district      String?
  contactNo     String?          @unique
  password      String?
  OTP           String?
  emailVerified Boolean?
  products      Product[]
  // orders        Orders[]         
  notifications notifications[]
  calendar      calendarEvents[]
}

model verification_codes {
  id    Int    @id @default(autoincrement())
  email String
  code  String
}

model Product {
  product_id    Int               @id @default(autoincrement())
  name          String
  price         Float
  description   String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  categoryId    Int
  category      Category          @relation(fields: [categoryId], references: [category_id], map: "product_category")
  sellerId      Int
  seller        sellers           @relation(fields: [sellerId], references: [seller_id], map: "product_seller")
  notifications notifications[]
  cart          cartProduct[]
  reviews       ReviewAndRating[]
  quantity      Int
  quantityLimit Int
  images        ProductImage[]    // New relation field
  //orders        Orders[]         
  orderProducts OrderProduct[]    // Added relation field
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  image     Bytes
  productId Int
  product   Product @relation(fields: [productId], references: [product_id], onDelete: Cascade, map: "ProductImage_product")
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String?
  products    Product[]
}

model cart {
  buyerId     Int           @id
  buyer       buyers        @relation(fields: [buyerId], references: [buyer_id], map: "cart_buyer")
  cartProduct cartProduct[]
}

model cartProduct {
  buyerId   Int
  buyer     cart    @relation(fields: [buyerId], references: [buyerId], map: "cartProduct_cart")
  productId Int
  product   Product @relation(fields: [productId], references: [product_id], map: "cartProduct_product")
  qty       Int

  @@id([buyerId, productId])
}

model wallet {
  buyer        buyers @relation(fields: [buyerId], references: [buyer_id], map: "wallet_buyer")
  buyerId      Int @id
  pointBalance Float
}

model admin {
  admin_id Int    @id @default(autoincrement())
  name     String
  email    String
  password String
}

model Orders {
  id              Int            @id @default(autoincrement())
  buyerId         Int
  buyer           buyers         @relation(fields: [buyerId], references: [buyer_id], map: "Orders_buyer")
  totalAmount     Float
  rewardPoints    Float
  usedrewardPoints  Float?
  deliveryInstructions  String?   
  deliveryAddress String?
  createdAt       DateTime       @default(now())
  orderProducts   OrderProduct[]
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Orders   @relation(fields: [orderId], references: [id], map: "OrderProduct_order")
  productId Int
  product   Product  @relation(fields: [productId], references: [product_id], map: "OrderProduct_product")
  quantity  Int
  amount    Float
}

model Payment {
  payment_id Int      @id @default(autoincrement())
  buyerId    Int
  date       DateTime
  Amount     Float
}

model calendarEvents {
  event_id    Int      @id @default(autoincrement())
  categoryId  Int
  productId   Int
  productName String
  note        String
  start       DateTime
  sellerId    Int
  seller      sellers  @relation(fields: [sellerId], references: [seller_id], map: "calendarEvents_seller")
}

model notifications {
  N_id      Int      @id @default(autoincrement())
  message   String
  timestamp DateTime
  Status    String
  sellerId  Int
  productid Int
  product   Product  @relation(fields: [productid], references: [product_id], map: "notifications_product")
  seller    sellers  @relation(fields: [sellerId], references: [seller_id], map: "notifications_seller")
}

model ReviewAndRating {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  productId Int
  product   Product  @relation(fields: [productId], references: [product_id], onDelete: Cascade, map: "ReviewAndRating_product")
  buyerId   Int
  buyer     buyers   @relation(fields: [buyerId], references: [buyer_id], onDelete: Cascade, map: "ReviewAndRating_buyer")
  createdAt DateTime @default(now())
}

model CarouselItem {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  altText   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
